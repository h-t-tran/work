{"version":3,"file":"angular-stomp.min.js","sources":["angular-stomp.es6.js"],"names":[],"mappings":"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","sourcesContent":["class ngstompProvider {\n\n    constructor() {\n        this.settings = {};\n    }\n\n    credential(login, password) {\n        this.settings.login = login;\n        this.settings.password = password;\n        return this;\n    }\n\n    url(url) {\n        this.settings.url = url;\n        return this;\n    }\n\n    class(clazz) {\n        this.settings.class = clazz;\n        return this;\n    }\n\n    settings(settingsObject) {\n        this.settings = settingsObject;\n        return this;\n    }\n\n    debug(boolean) {\n        this.settings.debug = boolean;\n        return this;\n    }\n\n    vhost(host) {\n        this.settings.vhost = host;\n        return this;\n    }\n\n    /* @ngInject */\n    $get($q, $log, $rootScope) {\n        return new ngStompWebSocket(this.settings, $q, $log, $rootScope);\n    }\n}\nclass ngStompWebSocket {\n\n    /*@ngNoInject*/\n    constructor(settings, $q, $log, $rootScope) {\n        this.settings = settings;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n\n        this.stompClient = settings.class ? Stomp.over(new settings.class(settings.url)) : Stomp.client(settings.url);\n        this.stompClient.debug = (settings.debug) ? $log.debug : function () {};\n\n        this.connections = [];\n        this.deferred = this.$q.defer();\n        this.promiseResult = this.deferred.promise;\n        this.connect();\n    }\n\n    connect() {\n        this.stompClient.connect(\n            this.settings.login,\n            this.settings.password,\n            () => {\n                this.deferred.resolve();\n                this.$digestStompAction();\n            },\n            () => {\n                this.deferred.reject();\n                this.$digestStompAction();\n            },\n            this.settings.vhost\n        );\n        return this.promiseResult;\n    }\n\n    subscribe(url, callback, scope) {\n        this.promiseResult.then(() => {\n            this.$stompSubscribe(url, callback);\n            this.unRegisterScopeOnDestroy(scope, url);\n        });\n        return this;\n    }\n\n    unsubscribe(url) {\n        this.promiseResult.then(() => this.$stompUnSubscribe(url));\n        return this;\n    };\n\n    send(queue, data, header) {\n        let sendDeffered = this.$q.defer();\n\n        this.promiseResult.then(() => {\n            this.stompClient.send(queue, header || {}, JSON.stringify(data));\n            sendDeffered.resolve();\n        });\n\n        return sendDeffered.promise;\n    };\n\n    disconnect() {\n        let disconnectionPromise = this.$q.defer();\n        this.stompClient.disconnect(() => {\n            disconnectionPromise.resolve();\n            this.$digestStompAction();\n        });\n\n        return disconnectionPromise.promise;\n    }\n\n    $stompSubscribe(queue, callback) {\n        let self = this;\n        let subscription = self.stompClient.subscribe(queue, function() {\n            callback.apply(self.stompClient, arguments);\n            self.$digestStompAction()\n        });\n        this.connections.push({url: queue, subscription: subscription});\n    }\n\n    $stompUnSubscribe(queue) {\n        let indexToRemove = false;\n        for (var i = 0, len = this.connections.length; i < len; i++) {\n            if (this.connections[i].url === queue) {\n                indexToRemove = i;\n                this.connections[i].subscription.unsubscribe();\n                break;\n            }\n        }\n        if (indexToRemove !== false) {\n            this.connections.splice(indexToRemove, 1);\n        }\n    }\n\n    $digestStompAction() {\n        !this.$rootScope.$$phase && this.$rootScope.$apply();\n    }\n\n    unRegisterScopeOnDestroy(scope, url) {\n        if (scope !== undefined && angular.isFunction(scope.$on))\n            scope.$on('$destroy', () => this.unsubscribe(url) );\n    }\n}\nangular.module('AngularStompDK', [])\n    .provider('ngstomp', ngstompProvider);\n"],"sourceRoot":"/source/"}